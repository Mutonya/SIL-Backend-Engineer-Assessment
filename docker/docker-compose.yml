services:
  web:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    command: bash -c "python manage.py migrate && gunicorn --bind 0.0.0.0:8000 --workers 4 ecommerce.wsgi:application"
    volumes:
      - ../:/app
    ports:
      - "8000:8000"
    env_file:
      - ../.env
    depends_on:
      - redis
      - db
    environment:
      - DJANGO_SETTINGS_MODULE=ecommerce.settings.production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  db:
    image: postgres:13-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health/" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  celery:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    command: celery -A ecommerce worker -l INFO
    volumes:
      - ../:/app
    env_file:
      - ../.env
    environment:
      - DJANGO_SETTINGS_MODULE=ecommerce.settings.production
    depends_on:
      - redis
      - db

  celery-beat:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    command: celery -A ecommerce beat -l INFO
    volumes:
      - ../:/app
    env_file:
      - ../.env
    environment:
      - DJANGO_SETTINGS_MODULE=ecommerce.settings.production
    depends_on:
      - redis
      - db

volumes:
  postgres_data:
